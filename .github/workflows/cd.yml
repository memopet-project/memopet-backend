name: CICD Test

on:
  pull_request:
    branches:
      - main
      
env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: memopetbucket
  AWS_CODE_DEPLOY_APPLICATION: cicd-memopet-CD
  AWS_CODE_DEPLOY_GROUP: cicd-memopet-CD-group

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04
      
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    
    # 환경별 yml 파일 생성(1) - application.yml
    - name: make application.yml
      shell: bash
      run: |
          touch ./src/main/resources/application.yml 
          echo "${{ secrets.YML }}" > ./application.yml  # github actions에서 설정한 값을 application.yml 파일에 쓰기
      
    - name: make jwt.yml
      shell: bash
      run: |
          touch src/main/resources/jwt.yml 
          echo "${{ secrets.JWT_YML }}" > src/main/resources/jwt.yml  # github actions에서 설정한 값을 application.yml 파일에 쓰기
          # gradle caching - 빌드 시간 향상
          
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: gradlew에 실행 권한 부여
      run: chmod +x ./gradlew
      
    # 추가
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      if: ${{ always() }}
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
        
    - name: 프로젝트 빌드
      run: ./gradlew clean build -x test

     # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/memopet-dev .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/memopet-dev
      
    # 6. deploy to aws
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_PROD }} # EC2 인스턴스 퍼블릭 DNS
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        port: ${{ secrets.SSH_PORT }}
        # 도커 작업
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/memopet-dev:latest
          docker stop $(docker ps -a -q)
          docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/memopet-dev:latest
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f
